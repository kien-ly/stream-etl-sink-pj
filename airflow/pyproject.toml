[project]
name = "dt-airflow-data"
version = "0.1.0"
description = "VNS MOAC dt Airflow repository"
authors = [{ name = "Ly Nguyen", email = "ly.nguyen@vnsilicon.net" }]
requires-python = ">=3.12"
keywords = ["airflow", "data", "pipeline", "ETL"]
dependencies = [
    "apache-airflow==2.10.5",
    "apache-airflow-providers-amazon>=9.6.1",
    "astronomer-cosmos",
    "boto3>=1.38.3",
    "loguru>=0.7.3",
    "meilisearch>=0.34.1",
    "nltk>=3.9.1",
    "numpy>=2.2.5",
    "pymupdf>=1.25.5",
    "pymupdf4llm>=0.0.22",
    "python-dotenv>=1.1.0",
    "ruff>=0.11.7",
    "scikit-learn>=1.6.1",
    "setuptools>=80.0.0",
    "wheel>=0.45.1",
    "trino==0.335.0",
    "boto3==1.39.3",
    "loguru==0.7.3",
    "kubernetes>=33.1.0",
    "pandas>=2.3.1",
]

[dependency-groups]
dev = [
    "ruff>=0.11.13",
]

[tool.setuptools]
packages = ["dt_airflow_data"]
include-package-data = true

[tool.setuptools.package-data]
dt_airflow_data = ["dags/**/*.py", "plugins/**/*"]

# --- START Ruff Configuration ---
[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
# Enable fix behavior by-default when running ruff
fix = true
# Enumerate all fixed violations.
show-fixes = true
# Exclude directories (e.g., virtual environments, build artifacts)
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors (PEP 8)
  "F",    # pyflakes (general errors)
  "I",    # isort (import sorting)
  "D",    # pydocstyle (docstring conventions)
  "UP",   # pyupgrade (modern syntax)
  "ANN",  # flake8-annotations (type hints)
  "B",    # flake8-bugbear (best practices)
  "N",    # pep8-naming
  "C90",  # mccabe (complexity)
]
# Ignore specific rules if needed (example: ignore missing docstrings for __init__)
ignore = [
  "D100",  # Missing docstring in public module
  "D104",  # Missing docstring in public package
  # Add more as appropriate for your codebase
]
# Formatting options
[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false
# Use `\n` line endings for all files
line-ending = "lf"
# Enable reformatting of code snippets in docstrings
docstring-code-format = true
# Docstring style: Google
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.flake8-annotations]
# Suppress ANN401 for dynamically typed *args and **kwargs arguments
allow-star-arg-any = true
# Allow the omission of a return type hint for __init__ if at least one argument is annotated
mypy-init-return = true
# Suppress ANN000-level violations for arguments matching the "dummy" variable regex (like _)
suppress-dummy-args = true
# Suppress ANN200-level violations for functions
suppress-none-returning = true
[tool.ruff.lint.isort]
# Whether to place import from imports before straight imports when sorting
from-first = false
# --- END Ruff Configuration ---